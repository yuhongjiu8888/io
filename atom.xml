<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JackYu&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/7d6859529934feb0edca87907b1ce4e0</icon>
  <subtitle>Nothing is impossible!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-26T10:13:07.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JackYu</name>
    <email>1134735533@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://yoursite.com/2018/12/26/git/"/>
    <id>http://yoursite.com/2018/12/26/git/</id>
    <published>2018-12-26T10:14:18.278Z</published>
    <updated>2018-12-26T10:13:07.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-git与SVN的区别"><a href="#1-git与SVN的区别" class="headerlink" title="1.git与SVN的区别"></a>1.git与SVN的区别</h5><p>git是分布式版本控制系统。必须客户端连接上服务端才能正常工作。<br>svn是集中式版本控制系统。每台机器就是一个单独运行的库，方便高效便捷的开发。</p><h5 id="2-git常用命令"><a href="#2-git常用命令" class="headerlink" title="2.git常用命令"></a>2.git常用命令</h5><p>git config -global ; 配置环境信息<br>git init ；将目录变成git管理的仓库，初始化仓库<br>git add ;提交到暂存区<br>git commit; 提交到本地仓<br>git status ;查看仓库是否有文件未提交<br>git diff 文件名；比较文件<br>git reset -hard HEAD~100;回到前100个版本<br>git reset -hard(版本号)；回到指定的版本号<br>git  reflog；取得版本号</p><p>git checkout -b ;创建并且换到分支<br>git branch dev ；创建分支<br>git checkout dev；切换分支<br>git merge dev; 将dev分支上的内容合并到主支master上<br>git branch -d name;删除分支</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-git与SVN的区别&quot;&gt;&lt;a href=&quot;#1-git与SVN的区别&quot; class=&quot;headerlink&quot; title=&quot;1.git与SVN的区别&quot;&gt;&lt;/a&gt;1.git与SVN的区别&lt;/h5&gt;&lt;p&gt;git是分布式版本控制系统。必须客户端连接上服务端才能正常工
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>协程</title>
    <link href="http://yoursite.com/2018/12/26/xiecheng/"/>
    <id>http://yoursite.com/2018/12/26/xiecheng/</id>
    <published>2018-12-26T08:58:34.519Z</published>
    <updated>2018-12-26T08:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>协程，英文（coroutines）,是一种比线程更加轻量级的存在。</p><ol><li>一个进程可以拥有多个线程，一个线程也可以拥有多个协程。</li><li>最重要的是，协程不是被操作系统内核所管理（内核调用），而完全是由用户态程序所控制（用户态执行）。</li><li>这样带来的好处就是性能得到了很大的提升，不像进程线程切换带来的消耗资源，cpu的调度。</li><li>协程的开销远远小于线程的开销。</li><li>协程并不想线程需要锁机制，协程中控制共享资源不加锁，只需要判断状态就好，所以执行效率比多线程高的多。</li></ol><p>因为协程是一个线程执行，那怎么利用多核CPU呢？<br>        最简单的方法就是多进程+协程，既充分利用多核，又充分发挥协程的高效率。</p><p>==协程允许我们写同步代码的逻辑，却做着异步的事，避免回调嵌套，使得代码逻辑清晰（协程是追求极限性能和优美的代码结构产物）==</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;协程，英文（coroutines）,是一种比线程更加轻量级的存在。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个进程可以拥有多个线程，一个线程也可以拥有多个协程。&lt;/li&gt;
&lt;li&gt;最重要的是，协程不是被操作系统内核所管理（内核调用），而完全是由用户态程序所控制（用户态执行）。&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Lua脚本式编程</title>
    <link href="http://yoursite.com/2018/12/26/lua/"/>
    <id>http://yoursite.com/2018/12/26/lua/</id>
    <published>2018-12-26T08:58:27.539Z</published>
    <updated>2018-12-26T08:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><p>单行注释：–<br>多行注释：–[[ 内容–]]</p><p>lua最好<strong>不要使用</strong>下划线加大字母的标识符，因为lua的保留字是这样的。<br>lua不允许使用特殊字符如@$%来定义标志符。</p><p>默认情况下，变量总是认为全局。<br>删除全局变量，只需要将变量赋值nil .</p><p>lua的数据类型：nil 、boolean、number、string、userdata、function、thread和table。</p><p>nil作为比较时应该加上双引号，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">type(x) == &quot;nil&quot;</span><br></pre></td></tr></table></figure><p>boolean类型只有两个可选值：true 和 false<br>lua把false和nil看作是“假”，其他都为真。</p><p>number（数字）：lua只有一种number类型，double双精度类型，默认类型可以修改luaconf.h里面的定义。</p><p>string（字符串）：由一对双引号或单引号来表示，也可以用2个方括号“[[ ]]”来表示“一块”字符串。</p><p>对一个数字字符串上进行算术操作时，lua会尝试将这个数字字符串转换成一个数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(“<span class="number">2</span>”+<span class="number">6</span>)   <span class="number">8.0</span></span><br><span class="line">print(<span class="string">"2"</span>+<span class="string">"6"</span>) <span class="number">8.0</span></span><br></pre></td></tr></table></figure><p>字符串连接使用的是 . .如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"a"</span> .. <span class="string">"b"</span>)  ab</span><br><span class="line">print(<span class="number">157</span> .. <span class="number">428</span>) <span class="number">157428</span></span><br></pre></td></tr></table></figure><p>#计算字符串的长度。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">len =<span class="string">"www.runoob.com"</span></span><br><span class="line">print(#len)                 14</span><br><span class="line">print(#"www.runoob.com") 14</span><br></pre></td></tr></table></figure><h3 id="2-宿主语言C-C"><a href="#2-宿主语言C-C" class="headerlink" title="2.宿主语言C/C++"></a>2.宿主语言C/C++</h3><p>==虚拟栈==<br>        无论何时lua调用C，被调用的函数都得到一个新的栈，这个栈独立于C函数本身的栈，也独立于之前的栈。<br>        方便起见，所有正对栈的API查询操作都不严格遵守栈的操作规则。而是可以用一个索引来指向栈上的任何元素：<br>        ==正的索引指的是栈上的绝对位置（从1开始），负的索引指从栈顶开始的偏移量。==</p><p>Lua_checkstack:扩大可用堆栈的尺寸<br>LUA_MINSTACK一般被定义为20。</p><p>压入栈的数据类型包括数值、字符串、指针、table、闭包。</p><p><img src="./attachments/1545806848964.drawio.html" alt="Diagram"></p><p>Lua_pushcclosure(L,func,0)；创建并压入一个闭包<br>Lua_createtable(L,0,0)；新建并压入一个表<br>Lua_pushnumber(L,343)；压入一个数字<br>Lua_pushstring(L,”Nystr”)；压入一个字符串</p><p>Lua中，number、boolean、nil、lightuserdata四种类型的值是直接存在栈上元素里和垃圾回收无关。<br>Lua中，string、table、closure、userdata、thread存在栈上元素里的只是指针，他们都会在生命周期结束后被垃圾回收。</p><p>Lua_push<em>族函数都有“创建一个类型的值并压入”的语义。<br>Lua value -&gt; C value时，是通过Lua_to</em>族api实现的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">取表中元素 </span><br><span class="line"><span class="keyword">void</span> lua_getfield(lua_state *L,int index,<span class="keyword">const</span> char *K)</span><br><span class="line">操作： arr = stack[index]</span><br><span class="line">stack.push(arr[K])</span><br><span class="line">取表中键为K的元素，这里的表是由index指向的栈上的一个表。</span><br><span class="line">栈高度+<span class="number">1</span>，栈顶元素是（stack[index]）[K]。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-基本语法&quot;&gt;&lt;a href=&quot;#1-基本语法&quot; class=&quot;headerlink&quot; title=&quot;1.基本语法&quot;&gt;&lt;/a&gt;1.基本语法&lt;/h3&gt;&lt;p&gt;单行注释：–&lt;br&gt;多行注释：–[[ 内容–]]&lt;/p&gt;
&lt;p&gt;lua最好&lt;strong&gt;不要使用&lt;/str
      
    
    </summary>
    
    
      <category term="技术,编程语言" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP通讯知识</title>
    <link href="http://yoursite.com/2018/11/25/TCP-IP%E9%80%9A%E8%AE%AF%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/11/25/TCP-IP通讯知识/</id>
    <published>2018-11-25T07:28:09.000Z</published>
    <updated>2018-11-25T07:28:51.974Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="TCP" scheme="http://yoursite.com/categories/TCP/"/>
    
    
      <category term="TCP网络通信" scheme="http://yoursite.com/tags/TCP%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>test_md</title>
    <link href="http://yoursite.com/2018/11/23/test-md/"/>
    <id>http://yoursite.com/2018/11/23/test-md/</id>
    <published>2018-11-23T12:06:11.000Z</published>
    <updated>2018-11-25T07:09:53.890Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="test" scheme="http://yoursite.com/categories/test/"/>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/23/hello-world/"/>
    <id>http://yoursite.com/2017/11/23/hello-world/</id>
    <published>2017-11-23T12:06:11.000Z</published>
    <updated>2018-11-25T07:23:27.648Z</updated>
    
    <content type="html"><![CDATA[<p>notshow: true<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;notshow: true&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a hr
      
    
    </summary>
    
      <category term="hexo查询" scheme="http://yoursite.com/categories/hexo%E6%9F%A5%E8%AF%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
